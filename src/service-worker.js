  /* eslint-disable no-restricted-globals */

  // This service worker can be customized!
  // See https://developers.google.com/web/tools/workbox/modules
  // for the list of available Workbox modules, or add any other
  // code you'd like.
  // You can also remove this file if you'd prefer not to use a
  // service worker, and the Workbox build step will be skipped.

  import { clientsClaim } from 'workbox-core';
  import { ExpirationPlugin } from 'workbox-expiration';
  import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
  import { registerRoute } from 'workbox-routing';
  import { StaleWhileRevalidate } from 'workbox-strategies';
  import {BackgroundSyncPlugin} from 'workbox-background-sync';
  import {NetworkOnly, NetworkFirst} from 'workbox-strategies';

  clientsClaim();

  // Precache all of the assets generated by your build process.
  // Their URLs are injected into the manifest variable below.
  // This variable must be present somewhere in your service worker file,
  // even if you decide not to use precaching. See https://cra.link/PWA
  precacheAndRoute(self.__WB_MANIFEST);

  // Set up App Shell-style routing, so that all navigation requests
  // are fulfilled with your index.html shell. Learn more at
  // https://developers.google.com/web/fundamentals/architecture/app-shell
  const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
  registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ request, url }) => {
      // If this isn't a navigation, skip.
      if (request.mode !== 'navigate') {
        return false;
      } // If this is a URL that starts with /_, skip.

      if (url.pathname.startsWith('/_')) {
        return false;
      } // If this looks like a URL for a resource, because it contains // a file extension, skip.

      if (url.pathname.match(fileExtensionRegexp)) {
        return false;
      } // Return true to signal that we want to use the handler.

      return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
  );

  // An example runtime caching route for requests that aren't handled by the
  // precache, in this case same-origin .png requests like those from in public/
  registerRoute(
    // Add in any other file extensions or routing criteria as needed.
    ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new StaleWhileRevalidate({
      cacheName: 'images',
      plugins: [
        // Ensure that once this runtime cache reaches a maximum size the
        // least-recently used images are removed.
        new ExpirationPlugin({ maxEntries: 50 }),
      ],
    })
  );

  // This allows the web app to trigger skipWaiting via
  // registration.waiting.postMessage({type: 'SKIP_WAITING'})
  self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
      self.skipWaiting();
    }
  });

  // Any other custom service worker logic can go here.

  // self.addEventListener('fetch', function(event) {
  //   // We will cache all POST requests, but in the real world, you will probably filter for
  //   // specific URLs like if(... || event.request.url.href.match(...))
  //   if(event.request.method === "GET"){
      
  //     // Init the cache. We use Dexie here to simplify the code. You can use any other
  //     // way to access IndexedDB of course.
  //     var db = new Dexie("getRequests");
  //     db.version(1).stores({
  //       post_cache: 'key,response,timestamp'
  //     })
    
  //     event.respondWith(
  //       // First try to fetch the request from the server
  //       fetch(event.request.clone())
  //       .then(function(response) {
  //         // If it works, put the response into IndexedDB
  //         cachePut(event.request.clone(), response.clone(), db.post_cache);
  //         return response;
  //       })
  //       .catch(function() {
  //         // If it does not work, return the cached response. If the cache does not
  //         // contain a response for our request, it will give us a 503-response
  //         return cacheMatch(event.request.clone(), db.post_cache);
  //       })
  //     );
  //   }
  // })

  const bgSyncPlugin = new BackgroundSyncPlugin('postRequests', {
    maxRetentionTime: 24 * 60 // Retry for max of 24 Hours (specified in minutes)
  });

  registerRoute(
    ({ url }) => true,
    new NetworkOnly({
      plugins: [bgSyncPlugin]
    }),
    'POST'
  );

  registerRoute(
    // Add in any other file extensions or routing criteria as needed.
    ({ url }) => { console.log("Rutas GET "+process.env.REACT_APP_API_URL , url.origin); return url.origin === process.env.REACT_APP_API_URL }, // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new NetworkFirst()
  );
